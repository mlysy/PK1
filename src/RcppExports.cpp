// This file was generated by Rcpp::compileAttributes
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/PK1.h"
#include <Rcpp.h>
#include <string>
#include <set>

using namespace Rcpp;

// Filter1_TV
NumericVector Filter1_TV(NumericVector rho, NumericVector x, double y0);
static SEXP PK1_Filter1_TV_try(SEXP rhoSEXP, SEXP xSEXP, SEXP y0SEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::traits::input_parameter< NumericVector >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type y0(y0SEXP);
    __result = Rcpp::wrap(Filter1_TV(rho, x, y0));
    return __result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP PK1_Filter1_TV(SEXP rhoSEXP, SEXP xSEXP, SEXP y0SEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(PK1_Filter1_TV_try(rhoSEXP, xSEXP, y0SEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// PK1_Sim
NumericMatrix PK1_Sim(int nReps, NumericVector X0, NumericVector Dose, NumericVector tObs, NumericVector Cl, NumericVector Ka, NumericVector Ke, NumericVector sigmaP);
RcppExport SEXP PK1_PK1_Sim(SEXP nRepsSEXP, SEXP X0SEXP, SEXP DoseSEXP, SEXP tObsSEXP, SEXP ClSEXP, SEXP KaSEXP, SEXP KeSEXP, SEXP sigmaPSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< int >::type nReps(nRepsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type X0(X0SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Dose(DoseSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type tObs(tObsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Cl(ClSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Ka(KaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Ke(KeSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type sigmaP(sigmaPSEXP);
    __result = Rcpp::wrap(PK1_Sim(nReps, X0, Dose, tObs, Cl, Ka, Ke, sigmaP));
    return __result;
END_RCPP
}
// PK1_Cmax_Sim
NumericMatrix PK1_Cmax_Sim(int nReps, NumericVector X0, NumericVector Dose, NumericVector tObs, NumericVector Cl, NumericVector Ka, NumericVector Ke, NumericVector sigmaP);
RcppExport SEXP PK1_PK1_Cmax_Sim(SEXP nRepsSEXP, SEXP X0SEXP, SEXP DoseSEXP, SEXP tObsSEXP, SEXP ClSEXP, SEXP KaSEXP, SEXP KeSEXP, SEXP sigmaPSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< int >::type nReps(nRepsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type X0(X0SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Dose(DoseSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type tObs(tObsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Cl(ClSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Ka(KaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Ke(KeSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type sigmaP(sigmaPSEXP);
    __result = Rcpp::wrap(PK1_Cmax_Sim(nReps, X0, Dose, tObs, Cl, Ka, Ke, sigmaP));
    return __result;
END_RCPP
}

// validate (ensure exported C++ functions exist before calling them)
static int PK1_RcppExport_validate(const char* sig) { 
    static std::set<std::string> signatures;
    if (signatures.empty()) {
        signatures.insert("NumericVector(*filter1.tv)(NumericVector,NumericVector,double)");
    }
    return signatures.find(sig) != signatures.end();
}

// registerCCallable (register entry points for exported C++ functions)
RcppExport SEXP PK1_RcppExport_registerCCallable() { 
    R_RegisterCCallable("PK1", "PK1_filter1.tv", (DL_FUNC)PK1_Filter1_TV_try);
    R_RegisterCCallable("PK1", "PK1_RcppExport_validate", (DL_FUNC)PK1_RcppExport_validate);
    return R_NilValue;
}
